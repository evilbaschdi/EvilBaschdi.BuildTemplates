jobs:
  - job: PushNuget
    pool:
      name: x-agentpool
    variables:
      - group: ApiKeys

    steps:
      - task: DownloadPipelineArtifact@2
        displayName: "Download $(Build.SourceBranchName) Artifact"
        inputs:
          artifact: "$(Build.SourceBranchName)"
          path: "$(Pipeline.Workspace)/$(Build.SourceBranchName)"

      - task: UseDotNet@2
        displayName: "Use .Net Core sdk from global.json"
        inputs:
          useGlobalJson: true
          includePreviewVersions: true

      - task: DotNetCoreCLI@2
        displayName: "dotnet push evilfeed"
        inputs:
          command: push
          packagesToPush: "$(Pipeline.Workspace)/$(Build.SourceBranchName)/*.nupkg"
          publishVstsFeed: "652346b9-9a10-49f8-a49a-f79b3ec66045"
        continueOnError: true

      - task: PowerShell@2
        displayName: "dotnet push MyGet"
        inputs:
          targetType: "inline"
          script: |
            $packagePath = "$(Pipeline.Workspace)/$(Build.SourceBranchName)"
            Write-Host "Looking for packages in: $packagePath"

            # Get all .nupkg files
            $packages = Get-ChildItem -Path $packagePath -Filter "*.nupkg" -File

            if ($packages.Count -eq 0) {
              Write-Host "No .nupkg files found in $packagePath"
              exit 0
            }

            Write-Host "Found $($packages.Count) package(s) to push:"
            $packages | ForEach-Object { Write-Host "  - $($_.Name)" }

            # Push each package individually
            foreach ($package in $packages) {
              Write-Host "Pushing package: $($package.Name)"
              $fullPath = $package.FullName

              # Use dotnet nuget push with the full path to the package
              & dotnet nuget push "$fullPath" --api-key "$(MyGet)" --source "https://www.myget.org/F/evilbaschdi/api/v3/index.json" --skip-duplicate

              if ($LASTEXITCODE -ne 0) {
                Write-Warning "Failed to push $($package.Name), but continuing with other packages..."
              } else {
                Write-Host "Successfully pushed $($package.Name)"
              }
            }
        continueOnError: true
